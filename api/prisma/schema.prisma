// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ChatBot Module
model Chatbot {
  id                    Int      @id @default(autoincrement())
  chats                 Chat[]   // Relation to chats initiated by this chatbot
  publicId              String   @default(uuid()) @unique
  name                  String
  modelId               Int
  model                 Model    @relation(fields: [modelId], references: [id])
  organizationId        Int      // Foreign key
  organization          Organization @relation(fields: [organizationId], references: [id]) // Relation to Organization
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([publicId])
}

model Chat {
  id                    Int       @id @default(autoincrement())
  publicId              String    @default(uuid()) @unique
  organizationId        Int       // Foreign key
  organization          Organization @relation(fields: [organizationId], references: [id])
  clientId              String    @unique
  chatbotId             Int       // Reference to the Chatbot
  chatbot               Chatbot   @relation(fields: [chatbotId], references: [id])
  status                ChatStatus
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  messages              Message[] // Relation to messages within this chat
}

enum ChatStatus {
  BOT
  ESCALATED
}

enum MessageSenderType {
  BOT
  CLIENT
  MEMBER
}

model Message {
  id                    Int      @id @default(autoincrement())
  publicId              String   @default(uuid()) @unique
  chatId                Int      // Reference to the Chat
  chat                  Chat     @relation(fields: [chatId], references: [id])
  content               String
  senderType            MessageSenderType
  createdAt             DateTime @default(now())
}

model Model {
  id                    Int             @id @default(autoincrement())
  publicId              String          @default(uuid()) @unique
  status                ModelStatus     @default(NOT_TRAINED)
  dataSourceAssets      DataSource[]
  chatbots              Chatbot[]
  organizationId        Int          // Foreign key
  organization          Organization @relation(fields: [organizationId], references: [id]) // Relation to Organization
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@index([publicId])
}

model DataSource {
  id                    Int        @id @default(autoincrement())
  publicId              String     @default(uuid()) @unique
  name                  String
  fileName              String
  transcriptCreated     Boolean    @default(false)
  type                  DataSourceType
  modelId               Int
  model                 Model      @relation(fields: [modelId], references: [id])
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@index([publicId])
}

model User {
  id                Int      @id @default(autoincrement())
  publicId          String   @default(uuid()) @unique
  auth0Id           String   @unique
  email             String   @unique
  name              String
  locale            String
  picture           String
  provider          String
  organizationId    Int      
  organization      Organization @relation(fields: [organizationId], references: [id]) // Relation to Organization
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Organization {
  id                Int       @id @default(autoincrement())
  publicId          String    @default(uuid()) @unique
  name              String
  users             User[]    // One-to-many relationship with User
  chatbots          Chatbot[] // One-to-many relationship with Chatbot
  chats             Chat[]    // One-to-many relationship with Chat
  models            Model[]   // One-to-many relationship with Model
}

enum ModelStatus {
  NOT_TRAINED
  AWAITING_TRAINING
  DURING_TRAINING
  CREATED
  FAILED
}

enum DataSourceType {
  TEXT
  PDF
}
